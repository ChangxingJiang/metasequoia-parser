"""
Auto generated by Metasequoia Parser
"""

import metasequoia_parser as ms_parser




def h0(a,b,c):
    a.append(2)
    b.append(c.v)
    return s2,True

def h1(a,b,c):
    a.append(5)
    b.append(c.v)
    return s5,True

def h2(a,b,c):
    a.append(6)
    b.append(c.v)
    return s6,True
def r0(a,b,_):
    v = ''
    n,k=R0[a[-1]]
    b.append(v)
    a.append(n)
    return k,False



E0={2}

def r1(a,b,_):
    v = ''
    assert a[-1] in E0
    b.append(v)
    a.append(3)
    return s3,False
def r2(a,b,_):
    v = f'{b[-3]}{b[-2]}{b[-1]}'
    n,k=R0[a[-4]]
    b[-3:]=[v]
    a[-3:]=[n]
    return k,False



def r3(a,b,_):
    v = f'{b[-2]}{b[-1]}'
    assert a[-3] in E0
    b[-2:]=[v]
    a[-2:]=[3]
    return s3,False
def p(a,b,c):
    return None,True


SH0={0:r0,1:h0,}


def s0(a,b,c):
    m=SH0[c.i]
    return m(a,b,c)


def s1(a,b,c):
    assert c.i==0
    return p(a,b,c)


SH2={1:h0,2:r0,3:r1,}


def s2(a,b,c):
    m=SH2[c.i]
    return m(a,b,c)


def s3(a,b,c):
    assert c.i==3
    return h1(a,b,c)


def s4(a,b,c):
    assert c.i==2
    return h2(a,b,c)



E1={0,2}
def s5(a,b,c):
    assert c.i in E1
    return r2(a,b,c)


def s6(a,b,c):
    assert c.i==3
    return r3(a,b,c)


R0={0:(1,s1),2:(4,s4),}

def parse(lexical_iterator: ms_parser.lexical.LexicalBase):
    a = [0]
    b = []

    action = s0
    c = lexical_iterator.lex()
    next_terminal = False
    try:
        while action:
            if next_terminal is True:
                c = lexical_iterator.lex()
            action, next_terminal = action(a, b, c)
    except KeyError as e:
        next_terminal_list = []
        for _ in range(10):
            if c.is_end:
                break
            next_terminal_list.append(c.v)
            c = lexical_iterator.lex()
        next_terminal_text = "".join(next_terminal_list)
        raise KeyError("解析失败:", next_terminal_text) from e

    return b[0]
